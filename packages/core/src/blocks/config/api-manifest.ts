// This file is auto-generated by scripts/generate-api-manifest.mjs
import type { ApiManifestEntry } from "./api-manifest-schema";

export const apiManifestEntries: ApiManifestEntry[] = [
  {
    apiName: "ai",
    blockKind: "ai-call",
    label: "AI Response",
    category: "ai",
    icon: "sparkles",
    description: "Send a prompt to the AI model and capture text or JSON output.",
    identifierField: "identifier",
    fields: [
        {
              id: "identifier",
              label: "Store As",
              description: "Optional variable that stores the AI response.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "prompt",
              label: "Prompt",
              description: "Instructions provided to the AI model.",
              required: true,
              input: {
                      kind: "string",
                      multiline: true,
                      placeholder: "Describe what the AI should do"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "format",
              label: "Output Format",
              description: "Response format. Select JSON when providing a schema.",
              defaultValue: "text",
              input: {
                      kind: "enum",
                      options: [
                      {
                                  label: "Text",
                                  value: "text"
                                },
                      {
                                  label: "JSON",
                                  value: "json"
                                }
                              ]
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "schema",
              label: "JSON Schema",
              description: "Schema used when requesting structured JSON output.",
              input: {
                      kind: "json-schema"
                    },
              valueType: {"kind":"object"}
            }
      ],
    outputs: [
        {
              id: "response",
              label: "AI Result",
              description: "Response object containing text/structured data.",
              valueType: {"kind":"union","options":[{"kind":"string"},{"kind":"object"}]}
            }
      ]
  },
  {
    apiName: "click",
    blockKind: "click-call",
    label: "Click",
    category: "automation",
    icon: "mouse",
    description: "Click at the provided coordinates or locator result.",
    fields: [
        {
              id: "target",
              label: "Target",
              description: "Expression resolving to [x, y] coordinates or a locator result.",
              required: true,
              input: {
                      kind: "expression"
                    },
              valueType: {"kind":"union","options":[{"kind":"array","of":{"kind":"number"}},{"kind":"object"}]}
            }
      ],
    outputs: []
  },
  {
    apiName: "fileReader",
    blockKind: "file-reader-call",
    label: "Read Files",
    category: "io",
    icon: "file",
    description: "Read up to 10 files and convert their contents to markdown.",
    identifierField: "assignTo",
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Variable that receives the file reader result.",
              required: true,
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "paths",
              label: "Files or Directories",
              description: "Expression resolving to an array of absolute file paths.",
              required: true,
              input: {
                      kind: "expression"
                    },
              valueType: {"kind":"array","of":{"kind":"string"}}
            }
      ],
    outputs: [
        {
              id: "results",
              label: "Results",
              description: "Array of {name, data, tokens} for each processed file.",
              valueType: {"kind":"array","of":{"kind":"object"}}
            },
        {
              id: "errors",
              label: "Errors",
              description: "List of files that failed to process.",
              valueType: {"kind":"array","of":{"kind":"object"}}
            },
        {
              id: "tokenCount",
              label: "Token Count",
              description: "Estimated total tokens for all documents.",
              valueType: {"kind":"number"}
            }
      ]
  },
  {
    apiName: "locator",
    blockKind: "locator-call",
    label: "Locate Element",
    category: "automation",
    icon: "eye",
    description: "Use vision or accessibility cues to locate an element on screen.",
    identifierField: "identifier",
    fields: [
        {
              id: "identifier",
              label: "Store As",
              description: "Optional variable storing the locator result.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "instruction",
              label: "Instruction",
              description: "Natural language instruction describing what to locate.",
              input: {
                      kind: "expression"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "role",
              label: "Role",
              description: "Accessibility role to match (for example button, textfield, link).",
              input: {
                      kind: "string",
                      placeholder: "button"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "name",
              label: "Name",
              description: "Optional accessible name/title to match.",
              input: {
                      kind: "string",
                      placeholder: "Submit"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "nameMatch",
              label: "Name Match",
              description: "How to match the element name when provided.",
              defaultValue: "contains",
              input: {
                      kind: "enum",
                      options: [
                      {
                                  label: "Contains",
                                  value: "contains"
                                },
                      {
                                  label: "Exact",
                                  value: "exact"
                                },
                      {
                                  label: "Starts With",
                                  value: "starts-with"
                                },
                      {
                                  label: "Ends With",
                                  value: "ends-with"
                                }
                              ]
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "pid",
              label: "Application PID",
              description: "Target application process identifier. Defaults to the frontmost app.",
              input: {
                      kind: "number",
                      min: 0,
                      step: 1
                    },
              valueType: {"kind":"number"}
            },
        {
              id: "element",
              label: "Advanced Selector",
              description: "Optional raw selector override (for example role:button name=Email).",
              input: {
                      kind: "string",
                      placeholder: "role:button name=Submit"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "waitTime",
              label: "Wait Time (s)",
              description: "How long to wait while searching before giving up.",
              defaultValue: 10,
              input: {
                      kind: "number",
                      min: 0,
                      step: 0.5
                    },
              valueType: {"kind":"number"}
            }
      ],
    outputs: [
        {
              id: "found",
              label: "Found",
              description: "Boolean indicating if element was located.",
              valueType: {"kind":"boolean"}
            },
        {
              id: "coordinates",
              label: "Coordinates",
              description: "Center point [x, y].",
              valueType: {"kind":"array","of":{"kind":"number"}}
            },
        {
              id: "x",
              label: "X",
              description: "X coordinate of the element center.",
              valueType: {"kind":"number"}
            },
        {
              id: "y",
              label: "Y",
              description: "Y coordinate of the element center.",
              valueType: {"kind":"number"}
            },
        {
              id: "width",
              label: "Width",
              description: "Detected element width.",
              valueType: {"kind":"number"}
            },
        {
              id: "height",
              label: "Height",
              description: "Detected element height.",
              valueType: {"kind":"number"}
            }
      ]
  },
  {
    apiName: "log",
    blockKind: "log-call",
    label: "Log Message",
    category: "utility",
    description: "Write a message to the workflow log.",
    fields: [
        {
              id: "message",
              label: "Message",
              description: "Expression evaluated and printed to the log.",
              required: true,
              input: {
                      kind: "expression"
                    },
              valueType: {"kind":"any"}
            }
      ],
    outputs: []
  },
  {
    apiName: "open",
    blockKind: "open-call",
    label: "Open App",
    category: "automation",
    description: "Launch an application and optionally wait for stability.",
    identifierField: "identifier",
    fields: [
        {
              id: "identifier",
              label: "Store As",
              description: "Optional variable that stores the app details.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "appName",
              label: "Application",
              description: "Name or bundle identifier of the application to open.",
              required: true,
              input: {
                      kind: "string",
                      placeholder: "Google Chrome"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "bringToFront",
              label: "Bring To Front",
              description: "Wait for UI stability before continuing.",
              defaultValue: true,
              input: {
                      kind: "boolean"
                    },
              valueType: {"kind":"boolean"}
            },
        {
              id: "waitSeconds",
              label: "Wait Seconds",
              description: "How long to wait for stability before timing out.",
              defaultValue: 5,
              input: {
                      kind: "number",
                      min: 0,
                      step: 0.5
                    },
              valueType: {"kind":"number"}
            }
      ],
    outputs: []
  },
  {
    apiName: "openUrl",
    blockKind: "open-url-call",
    label: "Open URL",
    category: "automation",
    description: "Open a URL in the default browser.",
    fields: [
        {
              id: "url",
              label: "URL",
              description: "Address to open in the default browser.",
              required: true,
              input: {
                      kind: "string",
                      placeholder: "https://example.com"
                    },
              valueType: {"kind":"string"}
            }
      ],
    outputs: []
  },
  {
    apiName: "press",
    blockKind: "press-call",
    label: "Press Key",
    category: "automation",
    icon: "keyboard",
    description: "Simulate pressing a keyboard key with optional modifiers.",
    fields: [
        {
              id: "key",
              label: "Key",
              description: "Name of the key to press (for example return, escape, a).",
              required: true,
              input: {
                      kind: "string",
                      placeholder: "return"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "modifiers",
              label: "Modifiers",
              description: "Optional comma-separated modifier keys (command, control, option, shift).",
              input: {
                      kind: "string",
                      placeholder: "command, shift"
                    },
              valueType: {"kind":"string"}
            }
      ],
    outputs: []
  },
  {
    apiName: "readClipboard",
    blockKind: "read-clipboard-call",
    label: "Read Clipboard",
    category: "automation",
    icon: "clipboard",
    description: "Read the current clipboard contents as text.",
    identifierField: "assignTo",
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Variable that receives the clipboard text.",
              required: true,
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            }
      ],
    outputs: [
        {
              id: "text",
              label: "Clipboard Text",
              description: "String value read from the clipboard.",
              valueType: {"kind":"string"}
            }
      ]
  },
  {
    apiName: "screenshot",
    blockKind: "screenshot-call",
    label: "Screenshot",
    category: "automation",
    icon: "eye",
    description: "Capture the screen or a specific application window.",
    identifierField: "assignTo",
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Optional variable that stores the screenshot result.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "target",
              label: "Target PID",
              description: "Expression resolving to a process identifier or screen index.",
              input: {
                      kind: "code",
                      placeholder: "app.pid",
                      language: "reflow"
                    },
              valueType: {"kind":"union","options":[{"kind":"number"},{"kind":"null"}]}
            }
      ],
    outputs: [
        {
              id: "image",
              label: "Image",
              description: "Base64 encoded PNG image.",
              valueType: {"kind":"image"}
            },
        {
              id: "originalWidth",
              label: "Original Width",
              description: "Original capture width.",
              valueType: {"kind":"number"}
            },
        {
              id: "originalHeight",
              label: "Original Height",
              description: "Original capture height.",
              valueType: {"kind":"number"}
            },
        {
              id: "physicalWidth",
              label: "Physical Width",
              description: "Physical screen width.",
              valueType: {"kind":"number"}
            },
        {
              id: "physicalHeight",
              label: "Physical Height",
              description: "Physical screen height.",
              valueType: {"kind":"number"}
            },
        {
              id: "resizedWidth",
              label: "Resized Width",
              description: "Normalized width used for AI operations.",
              valueType: {"kind":"number"}
            },
        {
              id: "resizedHeight",
              label: "Resized Height",
              description: "Normalized height used for AI operations.",
              valueType: {"kind":"number"}
            }
      ]
  },
  {
    apiName: "scroll",
    blockKind: "scroll-call",
    label: "Scroll",
    category: "automation",
    icon: "mouse",
    description: "Scroll the specified area in a direction by a given amount.",
    fields: [
        {
              id: "origin",
              label: "Origin",
              description: "Coordinates to perform the scroll from (defaults to last pointer location).",
              input: {
                      kind: "expression"
                    },
              valueType: {"kind":"union","options":[{"kind":"array","of":{"kind":"number"}},{"kind":"object"}]}
            },
        {
              id: "direction",
              label: "Direction",
              description: "Direction to scroll.",
              required: true,
              defaultValue: "down",
              input: {
                      kind: "enum",
                      options: [
                      {
                                  label: "Down",
                                  value: "down"
                                },
                      {
                                  label: "Up",
                                  value: "up"
                                },
                      {
                                  label: "Left",
                                  value: "left"
                                },
                      {
                                  label: "Right",
                                  value: "right"
                                }
                              ]
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "amount",
              label: "Distance",
              description: "Scroll distance measured in wheel notches.",
              required: true,
              defaultValue: 3,
              input: {
                      kind: "number",
                      min: 1,
                      step: 1
                    },
              valueType: {"kind":"number"}
            }
      ],
    outputs: []
  },
  {
    apiName: "selectAll",
    blockKind: "select-all-call",
    label: "Select All",
    category: "automation",
    icon: "keyboard",
    description: "Select all text/content in the active context.",
    fields: [],
    outputs: []
  },
  {
    apiName: "type",
    blockKind: "type-call",
    label: "Type Text",
    category: "automation",
    icon: "keyboard",
    description: "Type text or evaluated expressions at the current focus location.",
    fields: [
        {
              id: "text",
              label: "Text",
              description: "Expression that resolves to the text to type.",
              required: true,
              input: {
                      kind: "expression"
                    },
              valueType: {"kind":"string"}
            }
      ],
    outputs: []
  },
  {
    apiName: "vision",
    blockKind: "vision-call",
    label: "Vision Analysis",
    category: "ai",
    icon: "eye",
    description: "Send screenshots to the vision model and capture structured responses.",
    identifierField: "identifier",
    fields: [
        {
              id: "identifier",
              label: "Store As",
              description: "Variable that will store the vision response object.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "target",
              label: "Image Source",
              description: "Expression resolving to an image or array of images (for example screenshot().image).",
              required: true,
              input: {
                      kind: "expression",
                      expressionKind: "any"
                    },
              valueType: {"kind":"union","options":[{"kind":"image"},{"kind":"array","of":{"kind":"image"}}]}
            },
        {
              id: "prompt",
              label: "Prompt",
              description: "Natural language instructions for the vision model.",
              required: true,
              input: {
                      kind: "string",
                      multiline: true,
                      placeholder: "Describe what to look for"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "format",
              label: "Output Format",
              defaultValue: "json",
              input: {
                      kind: "enum",
                      options: [
                      {
                                  label: "JSON",
                                  value: "json"
                                },
                      {
                                  label: "Text",
                                  value: "text"
                                }
                              ]
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "schema",
              label: "JSON Schema",
              description: "Optional schema describing the AI response shape.",
              input: {
                      kind: "json-schema"
                    },
              valueType: {"kind":"object"}
            }
      ],
    outputs: [
        {
              id: "analysis",
              label: "Vision Result",
              description: "Object with parsed data from the vision model.",
              valueType: {"kind":"union","options":[{"kind":"object"},{"kind":"string"}]}
            }
      ]
  },
  {
    apiName: "wait",
    blockKind: "wait-call",
    label: "Wait",
    category: "automation",
    icon: "clock",
    description: "Pause execution for a specific number of seconds before continuing.",
    fields: [
        {
              id: "duration",
              label: "Seconds",
              description: "How long to wait. Fractions represent milliseconds (0.5 = 500ms).",
              required: true,
              defaultValue: 1,
              input: {
                      kind: "number",
                      min: 0,
                      step: 0.1
                    },
              valueType: {"kind":"number"}
            }
      ],
    outputs: []
  }
];

export const apiManifestByKind = new Map(apiManifestEntries.map((entry) => [entry.blockKind, entry]));
