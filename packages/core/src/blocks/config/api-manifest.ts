// This file is auto-generated by scripts/generate-api-manifest.mjs
import type { ApiManifestEntry } from "./api-manifest-schema";

export const apiManifestEntries: ApiManifestEntry[] = [
  {
    apiName: "captureContent",
    blockKind: "accessibility-capture-content-call",
    label: "AX Capture Content",
    category: "automation",
    description: "Extract textual content from an application's accessibility tree.",
    identifierField: "assignTo",
    defaultIdentifier: "content",
    invocation:   {
      "arguments": [
        "pid",
        "frontmostOnly",
        "maxElements",
        "includeTabs"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Optional variable that receives the captured content.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "pid",
              label: "Application PID",
              description: "Process identifier of the application to inspect. Defaults to the frontmost app when omitted.",
              input: {
                      kind: "expression"
                    },
              valueType: {"kind":"number"}
            },
        {
              id: "frontmostOnly",
              label: "Frontmost Window Only",
              description: "Limit capture to the frontmost window when available.",
              defaultValue: true,
              input: {
                      kind: "boolean"
                    },
              valueType: {"kind":"boolean"}
            },
        {
              id: "maxElements",
              label: "Max Elements",
              description: "Limit how many elements are included in the capture (helps keep prompts concise).",
              defaultValue: 200,
              input: {
                      kind: "number",
                      min: 1,
                      max: 2000,
                      step: 1
                    },
              valueType: {"kind":"integer"}
            },
        {
              id: "includeTabs",
              label: "Include Tabs",
              description: "Keep surrounding UI chrome (toolbars, tab strips, etc.) instead of filtering to page content.",
              defaultValue: false,
              input: {
                      kind: "boolean"
                    },
              valueType: {"kind":"boolean"}
            }
      ],
    outputs: [
        {
              id: "text",
              label: "Text",
              description: "Plain-text summary of captured elements.",
              valueType: {"kind":"string"}
            },
        {
              id: "elements",
              label: "Elements",
              description: "Structured element details that contributed to the capture.",
              valueType: {"kind":"array","of":{"kind":"object"}}
            },
        {
              id: "totalElements",
              label: "Total Elements",
              description: "Total number of traversed accessibility nodes.",
              valueType: {"kind":"number"}
            },
        {
              id: "returnedElements",
              label: "Returned Elements",
              description: "Number of elements included in the results after applying the limit.",
              valueType: {"kind":"number"}
            }
      ]
  },
  {
    apiName: "locate",
    blockKind: "accessibility-locate-call",
    label: "AX Locate",
    category: "automation",
    description: "Find accessibility elements matching a selector within the target app.",
    identifierField: "assignTo",
    defaultIdentifier: "elements",
    invocation:   {
      "arguments": [
        "pid",
        "selector",
        "timeout",
        "highlight"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Optional variable that receives the matched elements list.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "pid",
              label: "Application PID",
              description: "Process identifier of the application to inspect.",
              required: true,
              input: {
                      kind: "expression"
                    },
              valueType: {"kind":"number"}
            },
        {
              id: "selector",
              label: "Selector",
              description: "Accessibility selector string (for example role:button name=Submit).",
              required: true,
              input: {
                      kind: "string",
                      placeholder: "role:button name=Submit"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "timeout",
              label: "Timeout (s)",
              description: "How long to keep searching before giving up.",
              defaultValue: 5,
              input: {
                      kind: "number",
                      min: 0,
                      step: 0.5
                    },
              valueType: {"kind":"number"}
            },
        {
              id: "highlight",
              label: "Highlight Matches",
              description: "Flash the matched elements on screen.",
              defaultValue: false,
              input: {
                      kind: "boolean"
                    },
              valueType: {"kind":"boolean"}
            }
      ],
    outputs: [
        {
              id: "elements",
              label: "Elements",
              description: "Array of matching accessibility nodes.",
              valueType: {"kind":"array","of":{"kind":"object"}}
            }
      ]
  },
  {
    apiName: "traverse",
    blockKind: "accessibility-traverse-call",
    label: "AX Traverse",
    category: "automation",
    description: "Capture the current accessibility tree for an application.",
    identifierField: "assignTo",
    defaultIdentifier: "elements",
    invocation:   {
      "arguments": [
        "pid",
        "highlight",
        "frontmostOnly"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Optional variable that receives the traversal results.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "pid",
              label: "Application PID",
              description: "Process identifier of the application to traverse.",
              required: true,
              input: {
                      kind: "expression"
                    },
              valueType: {"kind":"number"}
            },
        {
              id: "highlight",
              label: "Highlight",
              description: "Flash elements as they are discovered.",
              defaultValue: false,
              input: {
                      kind: "boolean"
                    },
              valueType: {"kind":"boolean"}
            },
        {
              id: "frontmostOnly",
              label: "Frontmost Window Only",
              description: "Limit traversal to the frontmost window.",
              defaultValue: false,
              input: {
                      kind: "boolean"
                    },
              valueType: {"kind":"boolean"}
            }
      ],
    outputs: [
        {
              id: "elements",
              label: "Elements",
              description: "Array of accessibility nodes in the traversal order.",
              valueType: {"kind":"array","of":{"kind":"object"}}
            }
      ]
  },
  {
    apiName: "ai",
    blockKind: "ai-call",
    label: "AI Response",
    category: "ai",
    icon: "sparkles",
    description: "Send a prompt to the AI model and capture text or JSON output.",
    identifierField: "identifier",
    defaultIdentifier: "result",
    invocation:   {
      "arguments": [
        "prompt"
      ],
      "options": [
        "format",
        "schema"
      ],
      "style": "positionalWithOptions"
    },
    fields: [
        {
              id: "identifier",
              label: "Store As",
              description: "Optional variable that stores the AI response.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "prompt",
              label: "Prompt",
              description: "Instructions provided to the AI model.",
              required: true,
              input: {
                      kind: "string",
                      multiline: true,
                      placeholder: "Describe what the AI should do"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "format",
              label: "Output Format",
              description: "Response format. Select JSON when providing a schema.",
              defaultValue: "text",
              input: {
                      kind: "enum",
                      options: [
                      {
                                  label: "Text",
                                  value: "text"
                                },
                      {
                                  label: "JSON",
                                  value: "json"
                                }
                              ]
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "schema",
              label: "JSON Schema",
              description: "Schema used when requesting structured JSON output.",
              input: {
                      kind: "json-schema"
                    },
              valueType: {"kind":"object"}
            }
      ],
    outputs: [
        {
              id: "response",
              label: "AI Result",
              description: "Response object containing text/structured data.",
              valueType: {"kind":"union","options":[{"kind":"string"},{"kind":"object"}]}
            }
      ]
  },
  {
    apiName: "appendFile",
    blockKind: "append-file-call",
    label: "Append File",
    category: "io",
    description: "Append UTF-8 text to the end of a file, creating it when needed.",
    identifierField: "assignTo",
    invocation:   {
      "arguments": [
        "path",
        "content"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store Result",
              description: "Optional variable that receives the success flag.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "path",
              label: "Path",
              description: "File to append to.",
              required: true,
              input: {
                      kind: "string",
                      placeholder: "~/Documents/log.txt"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "content",
              label: "Content",
              description: "Text appended to the file.",
              required: true,
              input: {
                      kind: "string",
                      multiline: true
                    },
              valueType: {"kind":"string"}
            }
      ],
    outputs: [
        {
              id: "success",
              label: "Success",
              description: "True when the append completed.",
              valueType: {"kind":"boolean"}
            }
      ]
  },
  {
    apiName: "autonomousAgent",
    blockKind: "autonomous-agent-call",
    label: "Autonomous Agent",
    category: "ai",
    description: "Let the agent observe the screen and take UI actions to complete a task.",
    identifierField: "assignTo",
    defaultIdentifier: "agentResult",
    invocation:   {
      "arguments": [
        "taskPrompt"
      ],
      "options": [
        "maxLoops",
        "waitBetweenActions"
      ],
      "style": "positionalWithOptions"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Optional variable that receives the agent result.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "taskPrompt",
              label: "Task",
              description: "High-level instruction describing what the agent should accomplish.",
              required: true,
              input: {
                      kind: "string",
                      multiline: true
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "maxLoops",
              label: "Max Iterations",
              description: "Safety limit on the number of perception/action cycles.",
              defaultValue: 10,
              input: {
                      kind: "number",
                      min: 1,
                      step: 1
                    },
              valueType: {"kind":"number"}
            },
        {
              id: "waitBetweenActions",
              label: "Delay Between Actions (s)",
              description: "Pause between UI actions to avoid overwhelming the system.",
              defaultValue: 0.5,
              input: {
                      kind: "number",
                      min: 0,
                      step: 0.1
                    },
              valueType: {"kind":"number"}
            }
      ],
    outputs: [
        {
              id: "completed",
              label: "Completed",
              description: "True when the agent reported success.",
              valueType: {"kind":"boolean"}
            },
        {
              id: "loops",
              label: "Loops",
              description: "Total cycles executed.",
              valueType: {"kind":"number"}
            },
        {
              id: "chatHistory",
              label: "Chat History",
              description: "Conversation transcript exchanged with the agent.",
              valueType: {"kind":"array","of":{"kind":"object"}}
            }
      ]
  },
  {
    apiName: "click",
    blockKind: "click-call",
    label: "Click",
    category: "automation",
    icon: "mouse",
    description: "Click at the provided coordinates or locator result.",
    invocation:   {
      "arguments": [
        "target"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "target",
              label: "Target",
              description: "Expression resolving to [x, y] coordinates or a locator result.",
              required: true,
              input: {
                      kind: "expression"
                    },
              valueType: {"kind":"union","options":[{"kind":"array","of":{"kind":"number"}},{"kind":"object"}]}
            }
      ],
    outputs: []
  },
  {
    apiName: "confirm",
    blockKind: "confirm-dialog-call",
    label: "Confirm",
    category: "utility",
    description: "Show a yes/no confirmation dialog.",
    identifierField: "assignTo",
    defaultIdentifier: "confirmed",
    invocation:   {
      "arguments": [
        "prompt"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Optional variable that receives the boolean result.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "prompt",
              label: "Prompt",
              input: {
                      kind: "string",
                      placeholder: "Are you sure?"
                    },
              valueType: {"kind":"string"}
            }
      ],
    outputs: [
        {
              id: "confirmed",
              label: "Confirmed",
              description: "True when the user selected Yes.",
              valueType: {"kind":"boolean"}
            }
      ]
  },
  {
    apiName: "copyFile",
    blockKind: "copy-file-call",
    label: "Copy File",
    category: "io",
    description: "Copy a file to a new location.",
    identifierField: "assignTo",
    invocation:   {
      "arguments": [
        "sourcePath",
        "destinationPath"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store Result",
              description: "Optional variable that receives the success flag.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "sourcePath",
              label: "Source",
              required: true,
              input: {
                      kind: "string",
                      placeholder: "~/Downloads/source.txt"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "destinationPath",
              label: "Destination",
              required: true,
              input: {
                      kind: "string",
                      placeholder: "~/Documents/source.txt"
                    },
              valueType: {"kind":"string"}
            }
      ],
    outputs: [
        {
              id: "success",
              label: "Success",
              description: "True when the file was copied.",
              valueType: {"kind":"boolean"}
            }
      ]
  },
  {
    apiName: "createDirectory",
    blockKind: "create-directory-call",
    label: "Create Directory",
    category: "io",
    description: "Create a directory, optionally including missing parents.",
    identifierField: "assignTo",
    invocation:   {
      "arguments": [
        "path",
        "createIntermediates"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store Result",
              description: "Optional variable that receives the success flag.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "path",
              label: "Path",
              required: true,
              input: {
                      kind: "string",
                      placeholder: "~/Projects/new-folder"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "createIntermediates",
              label: "Create Parents",
              description: "Create intermediate directories when needed.",
              defaultValue: true,
              input: {
                      kind: "boolean"
                    },
              valueType: {"kind":"boolean"}
            }
      ],
    outputs: [
        {
              id: "success",
              label: "Success",
              description: "True when the directory was created.",
              valueType: {"kind":"boolean"}
            }
      ]
  },
  {
    apiName: "deleteFile",
    blockKind: "delete-file-call",
    label: "Delete File",
    category: "io",
    description: "Remove a file or directory from disk.",
    identifierField: "assignTo",
    invocation:   {
      "arguments": [
        "path"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store Result",
              description: "Optional variable that receives the success flag.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "path",
              label: "Path",
              required: true,
              input: {
                      kind: "string",
                      placeholder: "~/Downloads/temp.json"
                    },
              valueType: {"kind":"string"}
            }
      ],
    outputs: [
        {
              id: "success",
              label: "Success",
              description: "True when the path was removed.",
              valueType: {"kind":"boolean"}
            }
      ]
  },
  {
    apiName: "fileExists",
    blockKind: "file-exists-call",
    label: "File Exists",
    category: "io",
    description: "Test whether a file or directory exists.",
    identifierField: "assignTo",
    invocation:   {
      "arguments": [
        "path"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Optional variable that receives the boolean result.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "path",
              label: "Path",
              required: true,
              input: {
                      kind: "string",
                      placeholder: "~/Documents/report.pdf"
                    },
              valueType: {"kind":"string"}
            }
      ],
    outputs: [
        {
              id: "exists",
              label: "Exists",
              description: "True when the path is present.",
              valueType: {"kind":"boolean"}
            }
      ]
  },
  {
    apiName: "fileInfo",
    blockKind: "file-info-call",
    label: "File Info",
    category: "io",
    description: "Retrieve size and timestamps for a path.",
    identifierField: "assignTo",
    invocation:   {
      "arguments": [
        "path"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Optional variable that receives file metadata.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "path",
              label: "Path",
              required: true,
              input: {
                      kind: "string",
                      placeholder: "~/Documents/report.pdf"
                    },
              valueType: {"kind":"string"}
            }
      ],
    outputs: [
        {
              id: "info",
              label: "Info",
              description: "Object containing size, timestamps, and type.",
              valueType: {"kind":"object"}
            }
      ]
  },
  {
    apiName: "fileReader",
    blockKind: "file-reader-call",
    label: "Read Files",
    category: "io",
    icon: "file",
    description: "Read up to 10 files and convert their contents to markdown.",
    identifierField: "assignTo",
    defaultIdentifier: "documents",
    invocation:   {
      "arguments": [
        "paths"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Variable that receives the file reader result.",
              required: true,
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "paths",
              label: "Files or Directories",
              description: "Expression resolving to an array of absolute file paths.",
              required: true,
              input: {
                      kind: "expression"
                    },
              valueType: {"kind":"array","of":{"kind":"string"}}
            }
      ],
    outputs: [
        {
              id: "results",
              label: "Results",
              description: "Array of {name, data, tokens} for each processed file.",
              valueType: {"kind":"array","of":{"kind":"object"}}
            },
        {
              id: "errors",
              label: "Errors",
              description: "List of files that failed to process.",
              valueType: {"kind":"array","of":{"kind":"object"}}
            },
        {
              id: "tokenCount",
              label: "Token Count",
              description: "Estimated total tokens for all documents.",
              valueType: {"kind":"number"}
            }
      ]
  },
  {
    apiName: "getHomePath",
    blockKind: "get-home-path-call",
    label: "Get Home Path",
    category: "io",
    description: "Return the current user's home directory.",
    identifierField: "assignTo",
    defaultIdentifier: "homePath",
    invocation:   {
      "arguments": [],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Optional variable that receives the path.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            }
      ],
    outputs: [
        {
              id: "path",
              label: "Path",
              description: "Home directory path.",
              valueType: {"kind":"string"}
            }
      ]
  },
  {
    apiName: "getTempPath",
    blockKind: "get-temp-path-call",
    label: "Get Temp Path",
    category: "io",
    description: "Return the system temporary directory.",
    identifierField: "assignTo",
    defaultIdentifier: "tempPath",
    invocation:   {
      "arguments": [],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Optional variable that receives the path.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            }
      ],
    outputs: [
        {
              id: "path",
              label: "Path",
              description: "Temporary directory path.",
              valueType: {"kind":"string"}
            }
      ]
  },
  {
    apiName: "getWorkingDirectory",
    blockKind: "get-working-directory-call",
    label: "Get Working Directory",
    category: "io",
    description: "Return the process current working directory.",
    identifierField: "assignTo",
    defaultIdentifier: "cwd",
    invocation:   {
      "arguments": [],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Optional variable that receives the directory path.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            }
      ],
    outputs: [
        {
              id: "path",
              label: "Path",
              description: "Current working directory path.",
              valueType: {"kind":"string"}
            }
      ]
  },
  {
    apiName: "listDirectory",
    blockKind: "list-directory-call",
    label: "List Directory",
    category: "io",
    description: "List files and folders inside a directory.",
    identifierField: "assignTo",
    invocation:   {
      "arguments": [
        "path"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Optional variable that receives the entries.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "path",
              label: "Directory",
              required: true,
              input: {
                      kind: "string",
                      placeholder: "~/Documents"
                    },
              valueType: {"kind":"string"}
            }
      ],
    outputs: [
        {
              id: "entries",
              label: "Entries",
              description: "Array of file and folder names.",
              valueType: {"kind":"array","of":{"kind":"string"}}
            }
      ]
  },
  {
    apiName: "locator",
    blockKind: "locator-call",
    label: "Locate Element",
    category: "automation",
    icon: "eye",
    description: "Use vision or accessibility cues to locate an element on screen.",
    identifierField: "identifier",
    defaultIdentifier: "node",
    invocation:   {
      "arguments": [],
      "options": [
        "instruction",
        "role",
        "name",
        "nameMatch",
        "pid",
        "element",
        "waitTime"
      ],
      "style": "object"
    },
    fields: [
        {
              id: "identifier",
              label: "Store As",
              description: "Optional variable storing the locator result.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "instruction",
              label: "Instruction",
              description: "Natural language instruction describing what to locate.",
              input: {
                      kind: "expression"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "role",
              label: "Role",
              description: "Accessibility role to match (for example button, textfield, link).",
              input: {
                      kind: "string",
                      placeholder: "button"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "name",
              label: "Name",
              description: "Optional accessible name/title to match.",
              input: {
                      kind: "string",
                      placeholder: "Submit"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "nameMatch",
              label: "Name Match",
              description: "How to match the element name when provided.",
              defaultValue: "contains",
              input: {
                      kind: "enum",
                      options: [
                      {
                                  label: "Contains",
                                  value: "contains"
                                },
                      {
                                  label: "Exact",
                                  value: "exact"
                                },
                      {
                                  label: "Starts With",
                                  value: "starts-with"
                                },
                      {
                                  label: "Ends With",
                                  value: "ends-with"
                                }
                              ]
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "pid",
              label: "Application PID",
              description: "Target application process identifier. Defaults to the frontmost app.",
              input: {
                      kind: "expression"
                    },
              valueType: {"kind":"number"}
            },
        {
              id: "element",
              label: "Advanced Selector",
              description: "Optional raw selector override (for example role:button name=Email).",
              input: {
                      kind: "string",
                      placeholder: "role:button name=Submit"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "waitTime",
              label: "Wait Time (s)",
              description: "How long to wait while searching before giving up.",
              defaultValue: 10,
              input: {
                      kind: "number",
                      min: 0,
                      step: 0.5
                    },
              valueType: {"kind":"number"}
            }
      ],
    outputs: [
        {
              id: "found",
              label: "Found",
              description: "Boolean indicating if element was located.",
              valueType: {"kind":"boolean"}
            },
        {
              id: "coordinates",
              label: "Coordinates",
              description: "Center point [x, y].",
              valueType: {"kind":"array","of":{"kind":"number"}}
            },
        {
              id: "x",
              label: "X",
              description: "X coordinate of the element center.",
              valueType: {"kind":"number"}
            },
        {
              id: "y",
              label: "Y",
              description: "Y coordinate of the element center.",
              valueType: {"kind":"number"}
            },
        {
              id: "width",
              label: "Width",
              description: "Detected element width.",
              valueType: {"kind":"number"}
            },
        {
              id: "height",
              label: "Height",
              description: "Detected element height.",
              valueType: {"kind":"number"}
            }
      ]
  },
  {
    apiName: "log",
    blockKind: "log-call",
    label: "Log Message",
    category: "utility",
    description: "Write a message to the workflow log.",
    invocation:   {
      "arguments": [
        "message"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "message",
              label: "Message",
              description: "Expression evaluated and printed to the log.",
              required: true,
              input: {
                      kind: "expression"
                    },
              valueType: {"kind":"any"}
            }
      ],
    outputs: []
  },
  {
    apiName: "moveFile",
    blockKind: "move-file-call",
    label: "Move File",
    category: "io",
    description: "Move or rename a file.",
    identifierField: "assignTo",
    invocation:   {
      "arguments": [
        "sourcePath",
        "destinationPath"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store Result",
              description: "Optional variable that receives the success flag.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "sourcePath",
              label: "Source",
              required: true,
              input: {
                      kind: "string",
                      placeholder: "~/Downloads/source.txt"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "destinationPath",
              label: "Destination",
              required: true,
              input: {
                      kind: "string",
                      placeholder: "~/Documents/source.txt"
                    },
              valueType: {"kind":"string"}
            }
      ],
    outputs: [
        {
              id: "success",
              label: "Success",
              description: "True when the file was moved.",
              valueType: {"kind":"boolean"}
            }
      ]
  },
  {
    apiName: "open",
    blockKind: "open-call",
    label: "Open App",
    category: "automation",
    description: "Launch an application and optionally wait for stability.",
    identifierField: "identifier",
    defaultIdentifier: "app",
    invocation:   {
      "arguments": [
        "appName",
        "bringToFront",
        "waitSeconds"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "identifier",
              label: "Store As",
              description: "Optional variable that stores the app details.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "appName",
              label: "Application",
              description: "Name or bundle identifier of the application to open.",
              required: true,
              input: {
                      kind: "string",
                      placeholder: "Google Chrome"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "bringToFront",
              label: "Bring To Front",
              description: "Wait for UI stability before continuing.",
              defaultValue: true,
              input: {
                      kind: "boolean"
                    },
              valueType: {"kind":"boolean"}
            },
        {
              id: "waitSeconds",
              label: "Wait Seconds",
              description: "How long to wait for stability before timing out.",
              defaultValue: 5,
              input: {
                      kind: "number",
                      min: 0,
                      step: 0.5
                    },
              valueType: {"kind":"number"}
            }
      ],
    outputs: []
  },
  {
    apiName: "openUrl",
    blockKind: "open-url-call",
    label: "Open URL",
    category: "automation",
    description: "Open a URL in the default browser.",
    invocation:   {
      "arguments": [
        "url"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "url",
              label: "URL",
              description: "Address to open in the default browser.",
              required: true,
              input: {
                      kind: "string",
                      placeholder: "https://example.com"
                    },
              valueType: {"kind":"string"}
            }
      ],
    outputs: []
  },
  {
    apiName: "password",
    blockKind: "password-input-call",
    label: "Prompt Password",
    category: "utility",
    description: "Collect a password or other secure input.",
    identifierField: "assignTo",
    defaultIdentifier: "password",
    invocation:   {
      "arguments": [
        "prompt"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Optional variable that receives the password text.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "prompt",
              label: "Prompt",
              input: {
                      kind: "string",
                      placeholder: "Enter password"
                    },
              valueType: {"kind":"string"}
            }
      ],
    outputs: [
        {
              id: "value",
              label: "Value",
              description: "Captured password or null when cancelled.",
              valueType: {"kind":"union","options":[{"kind":"string"},{"kind":"null"}]}
            }
      ]
  },
  {
    apiName: "pathBasename",
    blockKind: "path-basename-call",
    label: "Path Basename",
    category: "io",
    description: "Return the last path component.",
    identifierField: "assignTo",
    defaultIdentifier: "basename",
    invocation:   {
      "arguments": [
        "path"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Optional variable that receives the basename.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "path",
              label: "Path",
              required: true,
              input: {
                      kind: "string",
                      placeholder: "~/Documents/report.pdf"
                    },
              valueType: {"kind":"string"}
            }
      ],
    outputs: [
        {
              id: "basename",
              label: "Basename",
              description: "Last component of the path.",
              valueType: {"kind":"string"}
            }
      ]
  },
  {
    apiName: "pathDirname",
    blockKind: "path-dirname-call",
    label: "Path Dirname",
    category: "io",
    description: "Return the parent directory of a path.",
    identifierField: "assignTo",
    defaultIdentifier: "dirname",
    invocation:   {
      "arguments": [
        "path"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Optional variable that receives the directory name.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "path",
              label: "Path",
              required: true,
              input: {
                      kind: "string",
                      placeholder: "~/Documents/report.pdf"
                    },
              valueType: {"kind":"string"}
            }
      ],
    outputs: [
        {
              id: "dirname",
              label: "Dirname",
              description: "Parent directory path.",
              valueType: {"kind":"string"}
            }
      ]
  },
  {
    apiName: "pathExtension",
    blockKind: "path-extension-call",
    label: "Path Extension",
    category: "io",
    description: "Return the filename extension of a path.",
    identifierField: "assignTo",
    defaultIdentifier: "pathExtension",
    invocation:   {
      "arguments": [
        "path"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Optional variable that receives the extension.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "path",
              label: "Path",
              required: true,
              input: {
                      kind: "string",
                      placeholder: "~/Documents/report.pdf"
                    },
              valueType: {"kind":"string"}
            }
      ],
    outputs: [
        {
              id: "extension",
              label: "Extension",
              description: "File extension without leading dot.",
              valueType: {"kind":"string"}
            }
      ]
  },
  {
    apiName: "pathJoin",
    blockKind: "path-join-call",
    label: "Join Path",
    category: "io",
    description: "Join path components using platform separators.",
    identifierField: "assignTo",
    defaultIdentifier: "joinedPath",
    invocation:   {
      "arguments": [
        "components"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Optional variable that receives the joined path.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "components",
              label: "Components",
              description: "Array of path segments (for example ['tmp', 'logs']).",
              required: true,
              input: {
                      kind: "expression"
                    },
              valueType: {"kind":"array","of":{"kind":"string"}}
            }
      ],
    outputs: [
        {
              id: "path",
              label: "Path",
              description: "Joined file system path.",
              valueType: {"kind":"string"}
            }
      ]
  },
  {
    apiName: "press",
    blockKind: "press-call",
    label: "Press Key",
    category: "automation",
    icon: "keyboard",
    description: "Simulate pressing a keyboard key with optional modifiers.",
    invocation:   {
      "arguments": [
        "key",
        "modifiers"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "key",
              label: "Key",
              description: "Name of the key to press (for example return, escape, a).",
              required: true,
              input: {
                      kind: "string",
                      placeholder: "return"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "modifiers",
              label: "Modifiers",
              description: "Optional comma-separated modifier keys (command, control, option, shift).",
              input: {
                      kind: "string",
                      placeholder: "command, shift"
                    },
              valueType: {"kind":"string"}
            }
      ],
    outputs: []
  },
  {
    apiName: "readClipboard",
    blockKind: "read-clipboard-call",
    label: "Read Clipboard",
    category: "automation",
    icon: "clipboard",
    description: "Read the current clipboard contents as text.",
    identifierField: "assignTo",
    defaultIdentifier: "clipboardText",
    invocation:   {
      "arguments": [],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Variable that receives the clipboard text.",
              required: true,
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            }
      ],
    outputs: [
        {
              id: "text",
              label: "Clipboard Text",
              description: "String value read from the clipboard.",
              valueType: {"kind":"string"}
            }
      ]
  },
  {
    apiName: "screenshot",
    blockKind: "screenshot-call",
    label: "Screenshot",
    category: "automation",
    icon: "eye",
    description: "Capture the screen or a specific application window.",
    identifierField: "assignTo",
    invocation:   {
      "arguments": [
        "target"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Optional variable that stores the screenshot result.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "target",
              label: "Target PID",
              description: "Expression resolving to a process identifier or screen index.",
              input: {
                      kind: "code",
                      placeholder: "app.pid",
                      language: "reflow"
                    },
              valueType: {"kind":"union","options":[{"kind":"number"},{"kind":"null"}]}
            }
      ],
    outputs: [
        {
              id: "image",
              label: "Image",
              description: "Base64 encoded PNG image.",
              valueType: {"kind":"image"}
            },
        {
              id: "originalWidth",
              label: "Original Width",
              description: "Original capture width.",
              valueType: {"kind":"number"}
            },
        {
              id: "originalHeight",
              label: "Original Height",
              description: "Original capture height.",
              valueType: {"kind":"number"}
            },
        {
              id: "physicalWidth",
              label: "Physical Width",
              description: "Physical screen width.",
              valueType: {"kind":"number"}
            },
        {
              id: "physicalHeight",
              label: "Physical Height",
              description: "Physical screen height.",
              valueType: {"kind":"number"}
            },
        {
              id: "resizedWidth",
              label: "Resized Width",
              description: "Normalized width used for AI operations.",
              valueType: {"kind":"number"}
            },
        {
              id: "resizedHeight",
              label: "Resized Height",
              description: "Normalized height used for AI operations.",
              valueType: {"kind":"number"}
            }
      ]
  },
  {
    apiName: "scroll",
    blockKind: "scroll-call",
    label: "Scroll",
    category: "automation",
    icon: "mouse",
    description: "Scroll the specified area in a direction by a given amount.",
    invocation:   {
      "arguments": [
        "origin",
        "direction",
        "amount"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "origin",
              label: "Origin",
              description: "Coordinates to perform the scroll from (defaults to last pointer location).",
              input: {
                      kind: "expression"
                    },
              valueType: {"kind":"union","options":[{"kind":"array","of":{"kind":"number"}},{"kind":"object"}]}
            },
        {
              id: "direction",
              label: "Direction",
              description: "Direction to scroll.",
              required: true,
              defaultValue: "down",
              input: {
                      kind: "enum",
                      options: [
                      {
                                  label: "Down",
                                  value: "down"
                                },
                      {
                                  label: "Up",
                                  value: "up"
                                },
                      {
                                  label: "Left",
                                  value: "left"
                                },
                      {
                                  label: "Right",
                                  value: "right"
                                }
                              ]
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "amount",
              label: "Distance",
              description: "Scroll distance measured in wheel notches.",
              required: true,
              defaultValue: 3,
              input: {
                      kind: "number",
                      min: 1,
                      step: 1
                    },
              valueType: {"kind":"number"}
            }
      ],
    outputs: []
  },
  {
    apiName: "setWorkingDirectory",
    blockKind: "set-working-directory-call",
    label: "Set Working Directory",
    category: "io",
    description: "Change the process current working directory.",
    identifierField: "assignTo",
    invocation:   {
      "arguments": [
        "path"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store Result",
              description: "Optional variable that receives the success flag.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "path",
              label: "Path",
              required: true,
              input: {
                      kind: "string",
                      placeholder: "~/Projects"
                    },
              valueType: {"kind":"string"}
            }
      ],
    outputs: [
        {
              id: "success",
              label: "Success",
              description: "True when the working directory changed.",
              valueType: {"kind":"boolean"}
            }
      ]
  },
  {
    apiName: "stickyNote",
    blockKind: "sticky-note-call",
    label: "Sticky Note",
    category: "utility",
    icon: "note",
    description: "Display a floating sticky note window with custom text.",
    identifierField: "assignTo",
    defaultIdentifier: "note",
    invocation:   {
      "arguments": [],
      "options": [
        "text",
        "title",
        "duration",
        "x",
        "y",
        "width",
        "height",
        "theme",
        "fontSize"
      ],
      "style": "object"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Optional variable that receives the sticky note details.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "text",
              label: "Text",
              description: "Content shown inside the sticky note window.",
              required: true,
              input: {
                      kind: "expression"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "title",
              label: "Title",
              description: "Window title shown in the sticky note chrome.",
              input: {
                      kind: "expression"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "duration",
              label: "Duration (s)",
              description: "Automatically close the note after this many seconds (omit to keep it open).",
              input: {
                      kind: "number",
                      min: 1,
                      step: 1
                    },
              valueType: {"kind":"number"}
            },
        {
              id: "x",
              label: "Position X",
              description: "Optional horizontal screen position for the window origin.",
              input: {
                      kind: "number",
                      step: 1
                    },
              valueType: {"kind":"number"}
            },
        {
              id: "y",
              label: "Position Y",
              description: "Optional vertical screen position for the window origin.",
              input: {
                      kind: "number",
                      step: 1
                    },
              valueType: {"kind":"number"}
            },
        {
              id: "width",
              label: "Width",
              description: "Sticky note width in points.",
              defaultValue: 320,
              input: {
                      kind: "number",
                      min: 160,
                      max: 800,
                      step: 10
                    },
              valueType: {"kind":"number"}
            },
        {
              id: "height",
              label: "Height",
              description: "Sticky note height in points.",
              defaultValue: 200,
              input: {
                      kind: "number",
                      min: 120,
                      max: 800,
                      step: 10
                    },
              valueType: {"kind":"number"}
            },
        {
              id: "theme",
              label: "Theme",
              description: "Color theme for the sticky note background.",
              defaultValue: "sunflower",
              input: {
                      kind: "enum",
                      options: [
                      {
                                  label: "Sunflower",
                                  value: "sunflower"
                                },
                      {
                                  label: "Ocean",
                                  value: "ocean"
                                },
                      {
                                  label: "Mint",
                                  value: "mint"
                                },
                      {
                                  label: "Graphite",
                                  value: "graphite"
                                }
                              ]
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "fontSize",
              label: "Font Size",
              description: "Text size in points.",
              defaultValue: 14,
              input: {
                      kind: "number",
                      min: 10,
                      max: 32,
                      step: 1
                    },
              valueType: {"kind":"number"}
            }
      ],
    outputs: [
        {
              id: "id",
              label: "Note ID",
              description: "Identifier of the sticky note window.",
              valueType: {"kind":"string"}
            },
        {
              id: "title",
              label: "Title",
              description: "Resolved window title.",
              valueType: {"kind":"string"}
            },
        {
              id: "text",
              label: "Text",
              description: "Resolved note text.",
              valueType: {"kind":"string"}
            },
        {
              id: "autoDismissAt",
              label: "Auto Dismiss At",
              description: "Epoch milliseconds when the note will close automatically.",
              valueType: {"kind":"number"}
            },
        {
              id: "x",
              label: "Position X",
              description: "Window origin X coordinate.",
              valueType: {"kind":"number"}
            },
        {
              id: "y",
              label: "Position Y",
              description: "Window origin Y coordinate.",
              valueType: {"kind":"number"}
            },
        {
              id: "width",
              label: "Width",
              description: "Window width in points.",
              valueType: {"kind":"number"}
            },
        {
              id: "height",
              label: "Height",
              description: "Window height in points.",
              valueType: {"kind":"number"}
            }
      ]
  },
  {
    apiName: "textarea",
    blockKind: "textarea-input-call",
    label: "Prompt Text Area",
    category: "utility",
    description: "Capture multi-line user input.",
    identifierField: "assignTo",
    defaultIdentifier: "text",
    invocation:   {
      "arguments": [
        "prompt"
      ],
      "options": [
        "placeholder",
        "default"
      ],
      "style": "positionalWithOptions"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Optional variable that receives the text.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "prompt",
              label: "Prompt",
              input: {
                      kind: "string",
                      placeholder: "Describe your update"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "placeholder",
              label: "Placeholder",
              description: "Hint text shown when empty.",
              input: {
                      kind: "string"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "default",
              label: "Default Value",
              description: "Initial value shown in the text area.",
              input: {
                      kind: "string",
                      multiline: true
                    },
              valueType: {"kind":"string"}
            }
      ],
    outputs: [
        {
              id: "value",
              label: "Value",
              description: "Text entered by the user or null when cancelled.",
              valueType: {"kind":"union","options":[{"kind":"string"},{"kind":"null"}]}
            }
      ]
  },
  {
    apiName: "type",
    blockKind: "type-call",
    label: "Type Text",
    category: "automation",
    icon: "keyboard",
    description: "Type text or evaluated expressions at the current focus location.",
    invocation:   {
      "arguments": [
        "text"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "text",
              label: "Text",
              description: "Expression that resolves to the text to type.",
              required: true,
              input: {
                      kind: "expression"
                    },
              valueType: {"kind":"string"}
            }
      ],
    outputs: []
  },
  {
    apiName: "input",
    blockKind: "user-input-call",
    label: "Prompt Input",
    category: "utility",
    description: "Ask the user for a single-line response.",
    identifierField: "assignTo",
    defaultIdentifier: "userInput",
    invocation:   {
      "arguments": [
        "prompt"
      ],
      "options": [
        "placeholder",
        "default",
        "type",
        "min",
        "max",
        "minLength",
        "maxLength"
      ],
      "style": "positionalWithOptions"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Optional variable that receives the response.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "prompt",
              label: "Prompt",
              description: "Message shown in the dialog.",
              required: true,
              input: {
                      kind: "string",
                      placeholder: "Enter value"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "placeholder",
              label: "Placeholder",
              description: "Hint text shown when the field is empty.",
              input: {
                      kind: "string"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "default",
              label: "Default Value",
              description: "Initial content placed in the field.",
              input: {
                      kind: "string"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "type",
              label: "Validation Type",
              description: "Optional validation rule (text, number, email, url).",
              input: {
                      kind: "string"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "min",
              label: "Minimum",
              description: "Minimum numeric value when type is number.",
              input: {
                      kind: "number"
                    },
              valueType: {"kind":"number"}
            },
        {
              id: "max",
              label: "Maximum",
              description: "Maximum numeric value when type is number.",
              input: {
                      kind: "number"
                    },
              valueType: {"kind":"number"}
            },
        {
              id: "minLength",
              label: "Min Length",
              description: "Required minimum number of characters.",
              input: {
                      kind: "number"
                    },
              valueType: {"kind":"number"}
            },
        {
              id: "maxLength",
              label: "Max Length",
              description: "Maximum number of characters allowed.",
              input: {
                      kind: "number"
                    },
              valueType: {"kind":"number"}
            }
      ],
    outputs: [
        {
              id: "value",
              label: "Value",
              description: "User provided text or null when cancelled.",
              valueType: {"kind":"union","options":[{"kind":"string"},{"kind":"null"}]}
            }
      ]
  },
  {
    apiName: "select",
    blockKind: "user-select-call",
    label: "Select Option",
    category: "utility",
    description: "Let the user pick one choice from a list.",
    identifierField: "assignTo",
    defaultIdentifier: "selection",
    invocation:   {
      "arguments": [
        "prompt",
        "choices"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store As",
              description: "Optional variable that receives the selection.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "prompt",
              label: "Prompt",
              required: true,
              input: {
                      kind: "string",
                      placeholder: "Choose an option"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "choices",
              label: "Choices",
              description: "Expression resolving to an array of string options.",
              required: true,
              input: {
                      kind: "expression"
                    },
              valueType: {"kind":"array","of":{"kind":"string"}}
            }
      ],
    outputs: [
        {
              id: "value",
              label: "Value",
              description: "Selected option or null when cancelled.",
              valueType: {"kind":"union","options":[{"kind":"string"},{"kind":"null"}]}
            }
      ]
  },
  {
    apiName: "vision",
    blockKind: "vision-call",
    label: "Vision Analysis",
    category: "ai",
    icon: "eye",
    description: "Send screenshots to the vision model and capture structured responses.",
    identifierField: "identifier",
    defaultIdentifier: "visionResult",
    invocation:   {
      "arguments": [
        "target",
        "prompt"
      ],
      "options": [
        "format",
        "schema"
      ],
      "style": "positionalWithOptions"
    },
    fields: [
        {
              id: "identifier",
              label: "Store As",
              description: "Variable that will store the vision response object.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "target",
              label: "Image Source",
              description: "Expression resolving to an image or array of images (for example screenshot().image).",
              required: true,
              input: {
                      kind: "expression",
                      expressionKind: "any"
                    },
              valueType: {"kind":"union","options":[{"kind":"image"},{"kind":"array","of":{"kind":"image"}}]}
            },
        {
              id: "prompt",
              label: "Prompt",
              description: "Natural language instructions for the vision model.",
              required: true,
              input: {
                      kind: "string",
                      multiline: true,
                      placeholder: "Describe what to look for"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "format",
              label: "Output Format",
              defaultValue: "json",
              input: {
                      kind: "enum",
                      options: [
                      {
                                  label: "JSON",
                                  value: "json"
                                },
                      {
                                  label: "Text",
                                  value: "text"
                                }
                              ]
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "schema",
              label: "JSON Schema",
              description: "Optional schema describing the AI response shape.",
              input: {
                      kind: "json-schema"
                    },
              valueType: {"kind":"object"}
            }
      ],
    outputs: [
        {
              id: "analysis",
              label: "Vision Result",
              description: "Object with parsed data from the vision model.",
              valueType: {"kind":"union","options":[{"kind":"object"},{"kind":"string"}]}
            }
      ]
  },
  {
    apiName: "wait",
    blockKind: "wait-call",
    label: "Wait",
    category: "automation",
    icon: "clock",
    description: "Pause execution for a specific number of seconds before continuing.",
    invocation:   {
      "arguments": [
        "duration"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "duration",
              label: "Seconds",
              description: "How long to wait. Fractions represent milliseconds (0.5 = 500ms).",
              required: true,
              defaultValue: 1,
              input: {
                      kind: "number",
                      min: 0,
                      step: 0.1
                    },
              valueType: {"kind":"number"}
            }
      ],
    outputs: []
  },
  {
    apiName: "writeFile",
    blockKind: "write-file-call",
    label: "Write File",
    category: "io",
    description: "Overwrite a file with new UTF-8 text content.",
    identifierField: "assignTo",
    invocation:   {
      "arguments": [
        "path",
        "content"
      ],
      "options": [],
      "style": "positional"
    },
    fields: [
        {
              id: "assignTo",
              label: "Store Result",
              description: "Optional variable that receives the success flag.",
              input: {
                      kind: "identifier",
                      scope: "variable",
                      allowCreation: true
                    },
              valueType: {"kind":"identifier"}
            },
        {
              id: "path",
              label: "Path",
              description: "Absolute or relative path to the file to write.",
              required: true,
              input: {
                      kind: "string",
                      placeholder: "~/Documents/output.txt"
                    },
              valueType: {"kind":"string"}
            },
        {
              id: "content",
              label: "Content",
              description: "Text content written to the file.",
              required: true,
              input: {
                      kind: "string",
                      multiline: true
                    },
              valueType: {"kind":"string"}
            }
      ],
    outputs: [
        {
              id: "success",
              label: "Success",
              description: "True when the file was written.",
              valueType: {"kind":"boolean"}
            }
      ]
  }
];

export const apiManifestByKind = new Map(apiManifestEntries.map((entry) => [entry.blockKind, entry]));
