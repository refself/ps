import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useMemo } from 'react';
import { Icon } from './icon';
import { useEditorStore } from '../state/editor-store';
import { usePaletteStore } from '../state/palette-store';
const WorkflowEditorHeader = ({ mode, setMode, onBack, connectionStatus, enableCommandPalette = false, enableUndoRedo = false, versioning, setIsVersionHistoryOpen, onRunScript, canRunScript, isRunnable, executionState, documentName, onRename, selectedBlockId, onDuplicateBlock, observabilityConfig, }) => {
    const undo = useEditorStore((state) => state.undo);
    const redo = useEditorStore((state) => state.redo);
    const openPalette = usePaletteStore((state) => state.openPalette);
    const statusMeta = useMemo(() => {
        if (connectionStatus === "offline") {
            return { label: "Offline", color: "#CD3A50", tone: "border-[#CD3A50] bg-[#CD3A5010] text-[#CD3A50]" };
        }
        if (connectionStatus === "checking") {
            return { label: "Checking…", color: "#9AA7B4", tone: "border-[#9AA7B4] bg-white text-[#9AA7B4]" };
        }
        return { label: "Connected", color: "#32AA81", tone: "border-[#32AA81] bg-[#32AA8110] text-[#32AA81]" };
    }, [connectionStatus]);
    return (_jsxs("div", { className: "flex items-center justify-between border-b border-[#0A1A2314] bg-white/90 px-6 py-4", children: [_jsxs("div", { className: "flex items-center gap-3", children: [onBack ? (_jsx("button", { type: "button", onClick: onBack, className: "flex h-9 w-9 items-center justify-center rounded-full border border-[#CED6E9] bg-white text-[#0A1A23] shadow-sm transition hover:border-[#3A5AE5] hover:text-[#3A5AE5]", "aria-label": "Back", children: _jsx(Icon, { name: "back", className: "h-4 w-4" }) })) : null, _jsx("input", { value: documentName, onChange: (event) => onRename(event.target.value), className: "w-64 rounded-md border border-[#0A1A2333] bg-white px-3 py-1.5 text-sm text-[#0A1A23] outline-none focus:border-[#3A5AE5] focus:ring-2 focus:ring-[#3A5AE533]", placeholder: "Untitled Workflow" })] }), _jsxs("div", { className: "flex items-center gap-2 rounded-full border border-[#0A1A2333] bg-[#F5F6FB] p-1 text-sm font-medium text-[#0A1A23]", children: [_jsx("button", { type: "button", onClick: () => setMode("visual"), className: `rounded-full px-4 py-1 transition ${mode === "visual" ? "bg-white text-[#3A5AE5] shadow" : "text-[#657782]"}`, "aria-pressed": mode === "visual", children: "Visual" }), _jsx("button", { type: "button", onClick: () => setMode("code"), className: `rounded-full px-4 py-1 transition ${mode === "code" ? "bg-white text-[#3A5AE5] shadow" : "text-[#657782]"}`, "aria-pressed": mode === "code", children: "Code" }), _jsx("button", { type: "button", onClick: () => setMode("recordings"), disabled: !observabilityConfig, className: `rounded-full px-4 py-1 transition ${mode === "recordings" ? "bg-white text-[#3A5AE5] shadow" : "text-[#657782]"} ${observabilityConfig ? "" : "opacity-50"}`, "aria-pressed": mode === "recordings", children: "Recordings" })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsxs("span", { className: `flex items-center gap-1.5 rounded-full border px-2.5 py-0.5 text-[11px] font-semibold ${statusMeta.tone}`, children: [_jsx("span", { className: "h-2 w-2 rounded-full", style: { backgroundColor: statusMeta.color } }), statusMeta.label] }), versioning ? (_jsxs("button", { type: "button", onClick: () => setIsVersionHistoryOpen(true), className: "relative flex h-9 w-9 items-center justify-center rounded-full border border-[#CED6E9] bg-white text-[#0A1A23] shadow-sm transition hover:border-[#3A5AE5] hover:text-[#3A5AE5]", "aria-label": "Open version history", children: [_jsx(Icon, { name: "clock", className: "h-4 w-4" }), versioning.activeVersionId ? null : (_jsx("span", { className: "absolute -right-0.5 -top-0.5 flex h-2 w-2 items-center justify-center rounded-full bg-[#CD3A50]", "aria-hidden": "true" }))] })) : null, enableCommandPalette ? (_jsx("button", { type: "button", onClick: () => openPalette(), className: "flex h-9 w-9 items-center justify-center rounded-full border border-[#CED6E9] bg-white text-[#0A1A23] shadow-sm transition hover:border-[#3A5AE5] hover:text-[#3A5AE5]", "aria-label": "Open command palette", children: _jsx(Icon, { name: "keyboard", className: "h-4 w-4" }) })) : null, enableUndoRedo ? (_jsxs(_Fragment, { children: [_jsx("button", { type: "button", onClick: undo, className: "flex h-9 w-9 items-center justify-center rounded-full border border-[#CED6E9] bg-white text-[#0A1A23] shadow-sm transition hover:border-[#3A5AE5] hover:text-[#3A5AE5]", "aria-label": "Undo", children: _jsx(Icon, { name: "undo", className: "h-4 w-4" }) }), _jsx("button", { type: "button", onClick: redo, className: "flex h-9 w-9 items-center justify-center rounded-full border border-[#CED6E9] bg-white text-[#0A1A23] shadow-sm transition hover:border-[#3A5AE5] hover:text-[#3A5AE5]", "aria-label": "Redo", children: _jsx(Icon, { name: "redo", className: "h-4 w-4" }) })] })) : null, _jsx("button", { type: "button", onClick: () => {
                            if (!selectedBlockId) {
                                return;
                            }
                            onDuplicateBlock(selectedBlockId);
                        }, className: "flex h-9 w-9 items-center justify-center rounded-full border border-[#CED6E9] bg-white text-[#0A1A23] shadow-sm transition hover:border-[#3A5AE5] hover:text-[#3A5AE5] disabled:cursor-not-allowed disabled:text-[#9AA7B4]", disabled: !selectedBlockId, "aria-label": "Duplicate block", children: _jsx(Icon, { name: "copy", className: "h-4 w-4" }) }), canRunScript && connectionStatus === "online" ? (_jsxs("button", { type: "button", onClick: onRunScript, disabled: executionState === "running" || executionState === "aborting" || !isRunnable, className: "flex h-9 items-center gap-2 rounded-full border border-[#3A5AE5] bg-[#3A5AE5] px-4 py-1 text-sm font-semibold text-white transition hover:bg-[#2d4bd4] disabled:cursor-not-allowed disabled:border-[#9AA7B4] disabled:bg-[#9AA7B4]", children: [_jsx(Icon, { name: "play", className: "h-4 w-4" }), executionState === "running"
                                ? "Running"
                                : executionState === "aborting"
                                    ? "Stopping…"
                                    : isRunnable
                                        ? "Run"
                                        : "Connect OS Client"] })) : null] })] }));
};
export default WorkflowEditorHeader;
